<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RHCSA on ADDZEY.DEV</title>
    <link>https://addzey.dev/tags/rhcsa/</link>
    <description>Recent content in RHCSA on ADDZEY.DEV</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Adam Rogers</copyright>
    <lastBuildDate>Sun, 28 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://addzey.dev/tags/rhcsa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RHCSA Study Notes</title>
      <link>https://addzey.dev/rhcsa/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://addzey.dev/rhcsa/</guid>
      <description>Introduction You can create a RedHat developer account for free which includes a RHEL subscription for up to 16 devices: https://developers.redhat.com/
I&amp;rsquo;ll be updating this as I go through practice tasks before taking the RHCSA exam!
Exam is booked in for 26/09/23
Understand and use essential tools Access a shell prompt and issue commands with correct syntax I would say this objective is well covered throughout, so I wont add any explanations or examples here</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;You can create a RedHat developer account for free which includes a RHEL subscription for up to 16 devices: &lt;a href=&#34;https://developers.redhat.com/&#34;&gt;https://developers.redhat.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be updating this as I go through practice tasks before taking the RHCSA exam!&lt;br&gt;
Exam is booked in for &lt;strong&gt;26/09/23&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;understand-and-use-essential-tools&#34;&gt;Understand and use essential tools&lt;/h2&gt;
&lt;h3 id=&#34;access-a-shell-prompt-and-issue-commands-with-correct-syntax&#34;&gt;Access a shell prompt and issue commands with correct syntax&lt;/h3&gt;
&lt;p&gt;I would say this objective is well covered throughout, so I wont add any explanations or examples here&lt;/p&gt;
&lt;h3 id=&#34;use-input-output-redirection----2-etc&#34;&gt;Use input-output redirection (&amp;gt;, &amp;raquo;, |, 2&amp;gt;, etc.)&lt;/h3&gt;
&lt;p&gt;STDIN (user) &lt;strong&gt;-&amp;gt;&lt;/strong&gt; CMD &lt;strong&gt;-&amp;gt;&lt;/strong&gt; STDOUT (console/screen)&lt;/p&gt;
&lt;p&gt;Read a file as standard input = &amp;ldquo;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&amp;rdquo; which changes the flow to &amp;lsquo;CMD &lt;strong&gt;-&amp;gt;&lt;/strong&gt; FILE &lt;strong&gt;-&amp;gt;&lt;/strong&gt; STDOUT&amp;rsquo; with the file replacing STDIN&lt;/p&gt;
&lt;p&gt;Send the standard output to a file = &amp;ldquo;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&amp;rdquo; which changes the flow to &amp;lsquo;STDIN &lt;strong&gt;-&amp;gt;&lt;/strong&gt; CMD &lt;strong&gt;-&amp;gt;&lt;/strong&gt; file&amp;rsquo; with the file now replacing STDOUT&lt;br&gt;
&lt;code&gt;ls &amp;gt; lsresult&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Redirect STDERR (error messages) = &amp;ldquo;&lt;strong&gt;2&amp;gt;&lt;/strong&gt;&amp;rdquo; which sends any error messages to the defined location&lt;br&gt;
&lt;code&gt;ls jibberish 2&amp;gt; errors&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ls jibberish 2&amp;gt; /dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Send the standard output to a file but this time append the file = &amp;ldquo;&lt;strong&gt;&amp;raquo;&lt;/strong&gt;&amp;rdquo; which changes the flow to &amp;lsquo;STDIN &lt;strong&gt;-&amp;gt;&lt;/strong&gt; CMD &lt;strong&gt;-&amp;gt;&lt;/strong&gt; file&amp;rsquo; with the file now replacing STDOUT and the STDOUT will append rather than write/overwrite&lt;br&gt;
&lt;code&gt;ls /etc &amp;gt;&amp;gt; lsetcresultappend&lt;/code&gt;
&lt;code&gt;ls /etc &amp;gt;&amp;gt; lsetcresultappend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Piping = &amp;ldquo;&lt;strong&gt;|&lt;/strong&gt;&amp;rdquo; will use the result of the previous command as the STDINPUT of another command&lt;br&gt;
&lt;code&gt;ls -l /etc | wc&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;use-grep-and-regular-expressions-to-analyze-text&#34;&gt;Use grep and regular expressions to analyze text&lt;/h3&gt;
&lt;p&gt;Find the text &amp;ldquo;ssh&amp;rdquo; in the output of &amp;lsquo;ps aux&amp;rsquo;: &lt;code&gt;ps aux | grep ssh&lt;/code&gt;&lt;br&gt;
Recursively search for the text &amp;ldquo;root&amp;rdquo; in /etc&amp;quot;: &lt;code&gt;grep -R root /etc&lt;/code&gt;&lt;br&gt;
Find the text &amp;ldquo;adam&amp;rdquo; in /etc/shadow but case-insensitive: &lt;code&gt;grep -i Adam /etc/shadow&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;access-remote-systems-using-ssh&#34;&gt;Access remote systems using SSH&lt;/h3&gt;
&lt;p&gt;Connect to a remote system using SSH: &lt;code&gt;ssh username@10.0.0.1&lt;/code&gt;&lt;br&gt;
Things to keep in mind: &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; which is a record of public keys for hosts you have connected to previously and &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt; which is the public key for the host you&amp;rsquo;re currently connected to&lt;/p&gt;
&lt;h3 id=&#34;log-in-and-switch-users-in-multiuser-targets&#34;&gt;Log in and switch users in multiuser targets&lt;/h3&gt;
&lt;p&gt;Change virtual terminal: &lt;code&gt;chvt 4&lt;/code&gt; Can also be done with CTL+ALT+F[1-6] when using console or phsyical logins&lt;br&gt;
Use &amp;ldquo;w&amp;rdquo; command to see all logged in users: &lt;code&gt;w&lt;/code&gt;&lt;br&gt;
Use &amp;ldquo;su&amp;rdquo; to change user to root: &lt;code&gt;su -&lt;/code&gt;&lt;br&gt;
Use &amp;ldquo;sudo&amp;rdquo; to run commands as root: &lt;code&gt;sudo command -options&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;archive-compress-unpack-and-uncompress-files-using-tar-star-gzip-and-bzip2&#34;&gt;Archive, compress, unpack, and uncompress files using tar, star, gzip, and bzip2&lt;/h3&gt;
&lt;p&gt;Create an XZ compressed archive of the home folder: &lt;code&gt;tar cJvf homefolder.tar.xz /home&lt;/code&gt;&lt;br&gt;
Extract a compressed archive into a folder: &lt;code&gt;tar xvf homefolder.tar.xz -C /tmp/archive&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-and-edit-text-files&#34;&gt;Create and edit text files&lt;/h3&gt;
&lt;p&gt;Replace all occurrences of a word in a text file: &lt;code&gt;sed -i s/originalword/replacementword/g /etc/service.conf&lt;/code&gt;&lt;br&gt;
Using vim is out of scope for these study notes, check out &lt;a href=&#34;https://www.linuxfoundation.org/blog/blog/classic-sysadmin-vim-101-a-beginners-guide-to-vim&#34;&gt;https://www.linuxfoundation.org/blog/blog/classic-sysadmin-vim-101-a-beginners-guide-to-vim&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-delete-copy-and-move-files-and-directories&#34;&gt;Create, delete, copy, and move files and directories&lt;/h3&gt;
&lt;p&gt;Create a directory: &lt;code&gt;mkdir directoryname&lt;/code&gt;&lt;br&gt;
Create a sub directory in directory that doesn&amp;rsquo;t already exist: &lt;code&gt;mkdir -p /tmp/newdir/newdir2&lt;/code&gt;&lt;br&gt;
Copy all files starting with the letter &amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo; or &amp;lsquo;c&amp;rsquo; from /etc into /tmp/files: &lt;code&gt;cp /etc/[a-c]* /tmp/files&lt;/code&gt;&lt;br&gt;
Move all files starting with the letters &amp;lsquo;a&amp;rsquo; or &amp;lsquo;b&amp;rsquo; to a subfolder: &lt;code&gt;mv [a-b]* /tmp/files/folder1&lt;/code&gt;&lt;br&gt;
Move all files starting with the letter &amp;lsquo;c&amp;rsquo; into a sub folder: &lt;code&gt;mv c* /tmp/files/folder2&lt;/code&gt;&lt;br&gt;
Copy all files smaller than 1KB into a sub folder: &lt;code&gt;find -size -1000c -exec cp {} /tmp/files/folder3 \;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-hard-and-soft-links&#34;&gt;Create hard and soft links&lt;/h3&gt;
&lt;p&gt;Consider hard links as similar to an additional copy of a file&lt;br&gt;
Consider soft/symbolic links as similar to a shortcut to a file&lt;/p&gt;
&lt;p&gt;Hard link &lt;code&gt;ln /etc/hosts /root/hardlinkhosts&lt;/code&gt;&lt;br&gt;
Soft link &lt;code&gt;ln -s /etc/hosts /root/symboliclinkhosts&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;list-set-and-change-standard-ugorwx-permissions&#34;&gt;List, set, and change standard ugo/rwx permissions&lt;/h3&gt;
&lt;p&gt;List the contents of a folder including the permissions: &lt;code&gt;ls -la&lt;/code&gt; or &lt;code&gt;ls -la /folder/path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Change the permissions of a folder or file: &lt;code&gt;chmod 770 file&lt;/code&gt; or &lt;code&gt;chmod u+wr file&lt;/code&gt; or &lt;code&gt;chmod g-w folder&lt;/code&gt;&lt;br&gt;
Set the permissions of a folder or file while removing any existing permissions: &lt;code&gt;chmod u=rw,g=r file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Set user owner and group owner of a file: &lt;code&gt;chown user:group file&lt;/code&gt;&lt;br&gt;
Set user owner and group owner of a folder and apply recursively: &lt;code&gt;chown -R user:group folder&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Set a default filesystem ACL for a group to always have read access to a folder: &lt;code&gt;setfacl -m d:g:groupname:rx /folder/path&lt;/code&gt;&lt;br&gt;
List existing filesystem ACL&amp;rsquo;s for a folder: &lt;code&gt;getfacl /folder/path&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;locate-read-and-use-system-documentation-including-man-info-and-files-in-usrsharedoc&#34;&gt;Locate, read, and use system documentation including man, info, and files in /usr/share/doc&lt;/h3&gt;
&lt;p&gt;Update mandb to be able to search for text: &lt;code&gt;mandb&lt;/code&gt;&lt;br&gt;
&lt;code&gt;man -k searchtext&lt;/code&gt;&lt;br&gt;
&lt;code&gt;man command&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;more /usr/share/doc/openssh/README&lt;/code&gt;&lt;br&gt;
&lt;code&gt;less /usr/share/doc/lvm2/README&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-simple-shell-scripts&#34;&gt;Create simple shell scripts&lt;/h2&gt;
&lt;h3 id=&#34;conditionally-execute-code-use-of-if-test--etc&#34;&gt;Conditionally execute code (use of: if, test, [], etc.)&lt;/h3&gt;
&lt;h3 id=&#34;use-looping-constructs-for-etc-to-process-file-command-line-input&#34;&gt;Use Looping constructs (for, etc.) to process file, command line input&lt;/h3&gt;
&lt;h3 id=&#34;process-script-inputs-1-2-etc&#34;&gt;Process script inputs ($1, $2, etc.)&lt;/h3&gt;
&lt;h3 id=&#34;processing-output-of-shell-commands-within-a-script&#34;&gt;Processing output of shell commands within a script&lt;/h3&gt;
&lt;h2 id=&#34;operate-running-systems&#34;&gt;Operate running systems&lt;/h2&gt;
&lt;p&gt;Display memory usage: &lt;code&gt;free -m&lt;/code&gt;&lt;br&gt;
Display uptime and load average: &lt;code&gt;uptime&lt;/code&gt;&lt;br&gt;
Nice levels for processes: &lt;strong&gt;-20&lt;/strong&gt; is highest priority and &lt;strong&gt;19&lt;/strong&gt; is lowest priority&lt;/p&gt;
&lt;h3 id=&#34;boot-reboot-and-shut-down-a-system-normally&#34;&gt;Boot, reboot, and shut down a system normally&lt;/h3&gt;
&lt;p&gt;Edit grub config to have a more verbose boot: &lt;code&gt;vim /etc/default/grub&lt;/code&gt;  and find &amp;ldquo;GRUB_CMDLINE_LINUX&amp;rdquo; then remove &amp;lsquo;rhgb quiet&amp;rsquo; from the options&lt;br&gt;
Write out a new grub config [BIOS]: &lt;code&gt;grub2-mkconfig -o /boot/grub2/grubg.cg&lt;/code&gt;&lt;br&gt;
Write out a new grub config [UEFI]: &lt;code&gt;grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reboot a system: &lt;code&gt;reboot&lt;/code&gt;&lt;br&gt;
Shutdown a system: &lt;code&gt;shutdown -h now&lt;/code&gt;  (Can specify a time delay in the -h switch)
Power off a system: &lt;code&gt;poweroff&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;boot-systems-into-different-targets-manually&#34;&gt;Boot systems into different targets manually&lt;/h3&gt;
&lt;p&gt;Show the current boot target: &lt;code&gt;systemctl get-default&lt;/code&gt;&lt;br&gt;
Switch into a new target manually: &lt;code&gt;systemctl isolate multi-user.target&lt;/code&gt;&lt;br&gt;
Set a new default boot target: &lt;code&gt;systemctl set-default multi-user.target&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;interrupt-the-boot-process-in-order-to-gain-access-to-a-system&#34;&gt;Interrupt the boot process in order to gain access to a system&lt;/h3&gt;
&lt;p&gt;Hit the arrow keys during the grub menu to prevent the timeout from ticking down and proceeding with the boot process&lt;br&gt;
Hit the &lt;code&gt;e&lt;/code&gt; key to edit the grub boot options&lt;br&gt;
Find the line specifying the Linux kernel options and append &lt;code&gt;rd.break&lt;/code&gt;&lt;br&gt;
Hit &lt;code&gt;ctrl+x&lt;/code&gt; to continue the boot process with your customizations&lt;br&gt;
You will be booted into emergency mode working from initramfs (actual system has not booted at all)&lt;br&gt;
Mount the root volume so we can make our changes: &lt;code&gt;mount -o remount,rw /sysroot&lt;/code&gt;&lt;br&gt;
Change the shell environment to use the actual system root: &lt;code&gt;chroot /sysroot&lt;/code&gt;&lt;br&gt;
Change the root password: &lt;code&gt;passwd root&lt;/code&gt;&lt;br&gt;
Reset/Fix the selinux labels so it&amp;rsquo;s possible to boot cleanly with the new root password: &lt;code&gt;touch /.autorelabel&lt;/code&gt;&lt;br&gt;
Hit &lt;code&gt;ctrl+d&lt;/code&gt; to exit the chroot environment&lt;br&gt;
Hit &lt;code&gt;ctrl+d&lt;/code&gt; again to continue the boot process&lt;/p&gt;
&lt;h3 id=&#34;identify-cpumemory-intensive-processes-and-kill-processes&#34;&gt;Identify CPU/memory intensive processes and kill processes&lt;/h3&gt;
&lt;p&gt;Detailed overview of running processes: &lt;code&gt;ps aux&lt;/code&gt;&lt;br&gt;
This will output a lot of text so it&amp;rsquo;s good to use less and step through the output with spacebar: &lt;code&gt;ps aux | less&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Overview of running processes and their hierarchical relation: &lt;code&gt;ps fax&lt;/code&gt;&lt;br&gt;
List of processes for a specific user: &lt;code&gt;ps fU adam&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Display system resource usage: &lt;code&gt;top&lt;/code&gt;&lt;br&gt;
For &lt;strong&gt;CPU%&lt;/strong&gt; - &lt;strong&gt;us&lt;/strong&gt; = user | &lt;strong&gt;sy&lt;/strong&gt; = system | &lt;strong&gt;ni&lt;/strong&gt; = nice | &lt;strong&gt;wa&lt;/strong&gt; = wait time (IO) | &lt;strong&gt;hi&lt;/strong&gt; = hardware interrupts | &lt;strong&gt;si&lt;/strong&gt; = software interrupts&lt;br&gt;
Press &lt;code&gt;f&lt;/code&gt; to change display settings and sorting&lt;br&gt;
Press &lt;code&gt;k&lt;/code&gt; to send the kill signal to the top process with &amp;ldquo;&lt;!-- raw HTML omitted --&gt;&amp;rdquo; or &amp;ldquo;&lt;!-- raw HTML omitted --&gt;&amp;rdquo; to send the kill signal to a specific process based on PID&lt;br&gt;
Press &lt;code&gt;r&lt;/code&gt; to renice (change the nice value) of a process&lt;/p&gt;
&lt;p&gt;Kill a process: &lt;code&gt;kill PID&lt;/code&gt; (polite method, process gets the opportunity to shutdown cleanly)&lt;br&gt;
Kill a process: &lt;code&gt;kill -9 PID&lt;/code&gt; (forced, can cause data loss for the process that&amp;rsquo;s force killed)&lt;br&gt;
Kill all instances of a specific processes: &lt;code&gt;killall processname&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;adjust-process-scheduling&#34;&gt;Adjust process scheduling&lt;/h3&gt;
&lt;p&gt;Run a process with lower priority: &lt;code&gt;nice 15 command&lt;/code&gt;&lt;br&gt;
Change the priority of a running process: &lt;code&gt;renice -n -10 PID&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;manage-tuning-profiles&#34;&gt;Manage tuning profiles&lt;/h3&gt;
&lt;p&gt;Ensure the &lt;strong&gt;tuned&lt;/strong&gt; service is running: &lt;code&gt;systemctl status tuned&lt;/code&gt;&lt;br&gt;
Show current tuned profile: &lt;code&gt;tuned-adm active&lt;/code&gt;&lt;br&gt;
Show list of all tuned profiles available: &lt;code&gt;tuned-adm list&lt;/code&gt;&lt;br&gt;
Set a specific tuned profile: &lt;code&gt;tuned-adm profile profilename&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;locate-and-interpret-system-log-files-and-journals&#34;&gt;Locate and interpret system log files and journals&lt;/h3&gt;
&lt;p&gt;Logs are now handled by &lt;strong&gt;systemd-journald&lt;/strong&gt; in binary format but still get passed to &lt;strong&gt;rslogd&lt;/strong&gt; which stores the logs in text format in &lt;code&gt;/var/log&lt;/code&gt;&lt;br&gt;
View the journal for a specific service: &lt;code&gt;systemctl status httpd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Send specific logs or severity of logs to it&amp;rsquo;s own log file: &lt;code&gt;vim /etc/rsyslog.conf&lt;/code&gt;&lt;br&gt;
Create a custom logrotate entry to rotate these logs: &lt;code&gt;vim /etc/logrotate.d/example&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/var/log/example {
    monthly
    rotate 12
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;preserve-system-journals&#34;&gt;Preserve system journals&lt;/h3&gt;
&lt;p&gt;Value inside &lt;code&gt;/etc/systemd/journald.conf&lt;/code&gt; the default will be &amp;ldquo;Storage=Auto&amp;rdquo; which will then persist logs if the folder &lt;code&gt;/var/log/journal&lt;/code&gt; exists&lt;br&gt;
Make the systemd-journald logs persistent: &lt;code&gt;mkdir -p /var/log/journal&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;start-stop-and-check-the-status-of-network-services&#34;&gt;Start, stop, and check the status of network services&lt;/h3&gt;
&lt;h3 id=&#34;securely-transfer-files-between-systems&#34;&gt;Securely transfer files between systems&lt;/h3&gt;
&lt;h2 id=&#34;configure-local-storage&#34;&gt;Configure local storage&lt;/h2&gt;
&lt;p&gt;List block devices: &lt;code&gt;lsblk&lt;/code&gt;&lt;br&gt;
Get UUID and labels of block devices: &lt;code&gt;blkid&lt;/code&gt;&lt;br&gt;
The block devices can be found in &lt;code&gt;/dev/devicename&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;list-create-delete-partitions-on-mbr-and-gpt-disks&#34;&gt;List, create, delete partitions on MBR and GPT disks&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Use parted for EFI/GPT&lt;/strong&gt;: &lt;code&gt;parted /dev/sdX&lt;/code&gt;&lt;br&gt;
List partitions with parted: &lt;code&gt;print&lt;/code&gt;&lt;br&gt;
Create a GPT partition table with parted: &lt;code&gt;mklabel&lt;/code&gt;&lt;br&gt;
Create a new GPT partition with parted: &lt;code&gt;mkpart&lt;/code&gt;&lt;br&gt;
Delete a partition with parted:  &lt;code&gt;rm&lt;/code&gt;&lt;br&gt;
Set a partition for use by LVM: &lt;code&gt;set N lvm on&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use fdisk for BIOS/MBR&lt;/strong&gt;: &lt;code&gt;fdisk /dev/sdX&lt;/code&gt;&lt;br&gt;
List partitions with fdisk: &lt;code&gt;print&lt;/code&gt;&lt;br&gt;
Create a MBR partition table with fdisk: &lt;code&gt;o&lt;/code&gt;&lt;br&gt;
Create a new partition with fdisk: &lt;code&gt;n&lt;/code&gt;&lt;br&gt;
Delete a partition with fdisk: &lt;code&gt;d&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-and-remove-physical-volumes&#34;&gt;Create and remove physical volumes&lt;/h3&gt;
&lt;p&gt;Initialize a partition for use with LVM: &lt;code&gt;pvcreate /dev/sdb4&lt;/code&gt;&lt;br&gt;
Initialize another partition for use with LVM: &lt;code&gt;pvcreate /dev/sdb5&lt;/code&gt;&lt;br&gt;
Initialize a disk for use with LVM: &lt;code&gt;pvcreate /dev/sdc&lt;/code&gt;&lt;br&gt;
Remove a physical volume: &lt;code&gt;pvremove /dev/sdb4&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;assign-physical-volumes-to-volume-groups&#34;&gt;Assign physical volumes to volume groups&lt;/h3&gt;
&lt;p&gt;Create a volume group from two physical volumes: &lt;code&gt;vgcreate volumegroup01 /dev/sdb4 /dev/sdb5&lt;/code&gt;&lt;br&gt;
This will automatically initialize/create the physical volumes if they hadn&amp;rsquo;t already been done like in the step above&lt;/p&gt;
&lt;h3 id=&#34;create-and-delete-logical-volumes&#34;&gt;Create and delete logical volumes&lt;/h3&gt;
&lt;p&gt;Create a logical volume using 100% of the available space in a volume group: &lt;code&gt;lvcreate -l100%FREE volumegroup01 -n logicalvolume01&lt;/code&gt;&lt;br&gt;
Delete a logical volume: &lt;code&gt;lvremove volumegroup01/logicalvolume01&lt;/code&gt;&lt;br&gt;
Create a logical volume of a specific size: &lt;code&gt;lvcreate -L 1.5G volumegroup01 -n logicalvolume02&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;configure-systems-to-mount-file-systems-at-boot-by-universally-unique-id-uuid-or-label&#34;&gt;Configure systems to mount file systems at boot by universally unique ID (UUID) or label&lt;/h3&gt;
&lt;p&gt;To mount by label when editing /etc/fstab use: &lt;code&gt;LABEL=labelofpartition&lt;/code&gt;  to specify the device&lt;br&gt;
To mount by UUID when editing /etc/fstab use: &lt;code&gt;UUID=&amp;quot;000000011-0001-ab00-ba0000001234&amp;quot;&lt;/code&gt;  to specify the device&lt;/p&gt;
&lt;p&gt;** You can also use systemd-mount which I&amp;rsquo;ll not cover for now **&lt;/p&gt;
&lt;h3 id=&#34;add-new-partitions-and-logical-volumes-and-swap-to-a-system-non-destructively&#34;&gt;Add new partitions and logical volumes, and swap to a system non-destructively&lt;/h3&gt;
&lt;p&gt;Format a swap partition: &lt;code&gt;mkswap /dev/sdX&lt;/code&gt;&lt;br&gt;
Mount a swap partition: &lt;code&gt;swapon -a&lt;/code&gt; or &lt;code&gt;swapon /dev/sdX&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-and-configure-file-systems&#34;&gt;Create and configure file systems&lt;/h2&gt;
&lt;h3 id=&#34;create-mount-unmount-and-use-vfat-ext4-and-xfs-file-systems&#34;&gt;Create, mount, unmount, and use vfat, ext4, and xfs file systems&lt;/h3&gt;
&lt;p&gt;Format a partition with XFS: &lt;code&gt;mkfs.xfs /dev/sdX&lt;/code&gt;&lt;br&gt;
Format a partition with EXT4: &lt;code&gt;mkfs.ext4 /dev/sdX&lt;/code&gt;&lt;br&gt;
Format a partition with VFAT: &lt;code&gt;mkfs.vfat /dev/sdX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Format a LVM logical volume with XFS: &lt;code&gt;mkfs.xfs /dev/mapper/volumegroup01-logicalvolume02&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mount a filesystem: &lt;code&gt;mount /dev/sdX /mount/location&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Show existing mounts: &lt;code&gt;mount&lt;/code&gt; or &lt;code&gt;findmnt&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;mount-and-unmount-network-file-systems-using-nfs&#34;&gt;Mount and unmount network file systems using NFS&lt;/h3&gt;
&lt;h3 id=&#34;configure-autofs&#34;&gt;Configure autofs&lt;/h3&gt;
&lt;h3 id=&#34;extend-existing-logical-volumes&#34;&gt;Extend existing logical volumes&lt;/h3&gt;
&lt;h3 id=&#34;create-and-configure-set-gid-directories-for-collaboration&#34;&gt;Create and configure set-GID directories for collaboration&lt;/h3&gt;
&lt;h3 id=&#34;diagnose-and-correct-file-permission-problems&#34;&gt;Diagnose and correct file permission problems&lt;/h3&gt;
&lt;h2 id=&#34;deploy-configure-and-maintain-systems&#34;&gt;Deploy, configure, and maintain systems&lt;/h2&gt;
&lt;h3 id=&#34;schedule-tasks-using-at-and-cron&#34;&gt;Schedule tasks using at and cron&lt;/h3&gt;
&lt;p&gt;Create a user-specific cron job with: &lt;code&gt;contrab -e&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cron file format needs to be as follows:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;minute&lt;/td&gt;
&lt;td&gt;hour&lt;/td&gt;
&lt;td&gt;day of month&lt;/td&gt;
&lt;td&gt;month&lt;/td&gt;
&lt;td&gt;day of week&lt;/td&gt;
&lt;td&gt;command to run&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0-59&lt;/td&gt;
&lt;td&gt;0-23&lt;/td&gt;
&lt;td&gt;1-31&lt;/td&gt;
&lt;td&gt;1-12&lt;/td&gt;
&lt;td&gt;0-7 (0 or 7 is Sunday)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Hourly, Daily, Weekly and Monthly cron jobs that are generally installed by packages can be found in &lt;code&gt;/etc/cron.d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use at to schedule a job to run at a specific time
&lt;code&gt;at 19:17&lt;/code&gt; followed by entering the command to run in the prompt: &lt;code&gt;logger send a message to the log&lt;/code&gt; followed by &lt;code&gt;ctrl+d&lt;/code&gt;&lt;br&gt;
List jobs in the &amp;ldquo;at&amp;rdquo; queue: &lt;code&gt;atq&lt;/code&gt;&lt;br&gt;
Remove a job from the &amp;ldquo;at&amp;rdquo; queue: &lt;code&gt;atrm jobnumber&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Another option is systemd timers which don&amp;rsquo;t look to be an exam objective, you can find some that come preconfigured in &lt;code&gt;/usr/lib/systemd/system&lt;/code&gt;&lt;br&gt;
These can be enabled and started like any other systemd unit: &lt;code&gt;systemctl enable example.timer&lt;/code&gt; and &lt;code&gt;systemd start example.timer&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;start-and-stop-services-and-configure-services-to-start-automatically-at-boot&#34;&gt;Start and stop services and configure services to start automatically at boot&lt;/h3&gt;
&lt;p&gt;Start a service: &lt;code&gt;systemctl start servicename&lt;/code&gt;&lt;br&gt;
Stop a service: &lt;code&gt;systemctl stop servicename&lt;/code&gt;&lt;br&gt;
Check the status of a service: &lt;code&gt;systemctl status servicename&lt;/code&gt;&lt;br&gt;
Set a service to start on boot: &lt;code&gt;systemctl enable servicename&lt;/code&gt;&lt;br&gt;
Stop a service from starting on boot: &lt;code&gt;systemctl disable servicename&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;List systemd unit types: &lt;code&gt;systemctl -t help&lt;/code&gt;&lt;br&gt;
List running units: &lt;code&gt;systemctl list-units&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reload systemd units after making changes: &lt;code&gt;systemctl daemon-reload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Edit a systemd service and have it always restart after a 1 minute delay:
&lt;code&gt;systemctl edit httpd&lt;/code&gt;&lt;br&gt;
In the text editor that opens, add in&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Service]
Restart=always
RestartSec=60s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reload systemd units: &lt;code&gt;systemctl daemon-reload&lt;/code&gt;&lt;br&gt;
Set the service to start at boot and start it now: &lt;code&gt;systemctl enable --now httpd&lt;/code&gt;
Kill the service: &lt;code&gt;killall httpd&lt;/code&gt;&lt;br&gt;
Check that the service has stopped and it&amp;rsquo;s Active status is &amp;ldquo;Activating&amp;rdquo; - this should show that it will auto-restart in 60 seconds&lt;br&gt;
&lt;code&gt;systemctl status httpd&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;configure-systems-to-boot-into-a-specific-target-automatically&#34;&gt;Configure systems to boot into a specific target automatically&lt;/h3&gt;
&lt;h3 id=&#34;configure-time-service-clients&#34;&gt;Configure time service clients&lt;/h3&gt;
&lt;p&gt;See current time status: &lt;code&gt;timedatectl status&lt;/code&gt;&lt;br&gt;
Set the timezone: &lt;code&gt;timedatectl set-timezone Country/State&lt;/code&gt;&lt;br&gt;
Time should be synchronized from NTP by default, NTP servers can be set in &lt;code&gt;/etc/chrony.conf&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;install-and-update-software-packages-from-red-hat-network-a-remote-repository-or-from-the-local-file-system&#34;&gt;Install and update software packages from Red Hat Network, a remote repository, or from the local file system&lt;/h3&gt;
&lt;p&gt;Installing packages from Red Hat network requires registering a subscription which can be done with Subscription Manager&lt;br&gt;
Register subscription: &lt;code&gt;subscription-manager register&lt;/code&gt; (provide username and password)&lt;br&gt;
Connect the subscription: &lt;code&gt;subscription-manager attach --auto&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Search for a package: &lt;code&gt;yum search packagename&lt;/code&gt;&lt;br&gt;
Find a package that contains a wanted tool: &lt;code&gt;yum provides setools&lt;/code&gt;&lt;br&gt;
Show info/description of a package: &lt;code&gt;yum info packagename&lt;/code&gt;&lt;br&gt;
Show all available packages: &lt;code&gt;yum list&lt;/code&gt; and show installed packages: &lt;code&gt;yum list installed&lt;/code&gt;&lt;br&gt;
Install a package: &lt;code&gt;yum install packagename&lt;/code&gt;&lt;br&gt;
Remove a package: &lt;code&gt;yum remove packagename&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Check for newer versions of installed packages: &lt;code&gt;yum update&lt;/code&gt;&lt;br&gt;
Check for a newer version of a specific package: &lt;code&gt;yum update packagename&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Download the rpm of an available package: &lt;code&gt;yumdownloader httpd&lt;/code&gt; or &lt;code&gt;dnf download httpd&lt;/code&gt;&lt;br&gt;
Check an rpm file for any scripts: &lt;code&gt;rpm -qp --scripts httpd-2.4.57-5.el9.x86_64.rpm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$$ need to add something for &amp;ldquo;yum groups&amp;rdquo; and &amp;ldquo;yum modules&amp;rdquo; $$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a &lt;strong&gt;local&lt;/strong&gt; repo for installing packages:&lt;br&gt;
Create an ISO from the dvd drive: &lt;code&gt;dd if=/dev/sr0 of=/rhel92.iso bs=1M&lt;/code&gt;&lt;br&gt;
Create a mount point: &lt;code&gt;mkdir /repo&lt;/code&gt;&lt;br&gt;
Mount the ISO as &lt;strong&gt;/repo&lt;/strong&gt; by editing &lt;strong&gt;/etc/fstab&lt;/strong&gt; and adding &lt;code&gt;/rhel92.iso /repo iso9660 defaults 0 0&lt;/code&gt; followed by &lt;code&gt;systemctl daemon-reload&lt;/code&gt; and &lt;code&gt;mount -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create a yum repo with an entry for the above starting with BaseOS and then AppStream:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim /etc/yum.repos.d/baseos.repo&lt;/code&gt;&lt;br&gt;
Enter the contents:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    [BaseOS]  
    name=BaseOS  
    baseurl=file:///repo/BaseOS 
    gpgcheck=0  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;vim /etc/yum.repos.d/appstream.repo&lt;/code&gt;&lt;br&gt;
Enter the contents:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    [AppStream]  
    name=AppStream  
    baseurl=file:///repo/AppStream  
    gpgcheck=0  
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;modify-the-system-bootloader&#34;&gt;Modify the system bootloader&lt;/h3&gt;
&lt;h2 id=&#34;manage-basic-networking&#34;&gt;Manage basic networking&lt;/h2&gt;
&lt;h3 id=&#34;configure-ipv4-and-ipv6-addresses&#34;&gt;Configure IPv4 and IPv6 addresses&lt;/h3&gt;
&lt;p&gt;General tools for network info: &lt;code&gt;ip addr&lt;/code&gt; and &lt;code&gt;ip -s link&lt;/code&gt; and &lt;code&gt;ip route&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;strong&gt;NetworkManager CLI&lt;/strong&gt; to configure networking:&lt;br&gt;
Create static connection with the name &amp;ldquo;example-static&amp;rdquo;: &lt;code&gt;nmcli con add type ethernet con-name example-static ifname enp2s0 ip4 192.168.1.100/24 gw4 192.168.1.1&lt;/code&gt;&lt;br&gt;
Add DNS to the connection &amp;ldquo;example-static&amp;rdquo;: &lt;code&gt;nmcli con mod example-static ipv4.dns “8.8.8.8 8.8.4.4”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;strong&gt;NetworkManager console GUI&lt;/strong&gt; to configure networking: &lt;code&gt;nmtui&lt;/code&gt;&lt;br&gt;
Use &lt;code&gt;arrow keys, tab, spacebar and enter&lt;/code&gt; to navigate menu options for configuring network settings&lt;/p&gt;
&lt;h3 id=&#34;configure-hostname-resolution&#34;&gt;Configure hostname resolution&lt;/h3&gt;
&lt;p&gt;This would be done above by setting DNS servers
If there&amp;rsquo;s any issues with hostname resolution you can check &lt;code&gt;/etc/resolv.conf&lt;/code&gt;  which should say this file is managed by NetworkManager
Set DNS for a connection named &amp;ldquo;example-static&amp;rdquo;: &lt;code&gt;nmcli con mod example-static ipv4.dns “8.8.8.8 8.8.4.4”&lt;/code&gt;
Confirm hostname resolution is working using &lt;code&gt;dig&lt;/code&gt; or &lt;code&gt;ping hostname.com&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;configure-network-services-to-start-automatically-at-boot&#34;&gt;Configure network services to start automatically at boot&lt;/h3&gt;
&lt;p&gt;Start a network service: &lt;code&gt;systemctl start httpd&lt;/code&gt;&lt;br&gt;
Set the network service to start automatically at boot: &lt;code&gt;systemctl enable httpd&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;restrict-network-access-using-firewall-cmdfirewall&#34;&gt;Restrict network access using firewall-cmd/firewall&lt;/h3&gt;
&lt;p&gt;Show current config: &lt;code&gt;firewall-cmd --list-all&lt;/code&gt;&lt;br&gt;
List pre-defined services that can be allowed through the firewall: &lt;code&gt;firewall-cmd --list-services&lt;/code&gt;&lt;br&gt;
Allow HTTPS traffic for runtime: &lt;code&gt;firewall-cmd --add-service https&lt;/code&gt;&lt;br&gt;
Allow HTTPS traffic and make it persistent: &lt;code&gt;firewall-cmd --add-service https --permanent&lt;/code&gt;&lt;br&gt;
Reload firewall: &lt;code&gt;firewall-cmd --reload&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;manage-users-and-groups&#34;&gt;Manage users and groups&lt;/h2&gt;
&lt;h3 id=&#34;create-delete-and-modify-local-user-accounts&#34;&gt;Create, delete, and modify local user accounts&lt;/h3&gt;
&lt;p&gt;Create a user with a comment associated with the account: &lt;code&gt;useradd -c &amp;quot;this is a new user&amp;quot; notadam&lt;/code&gt;&lt;br&gt;
Create a new user without a comment: &lt;code&gt;useradd notadam2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Remove a user: &lt;code&gt;userdel notadam2&lt;/code&gt;&lt;br&gt;
Remove a user and remove their home directory: &lt;code&gt;userdel -r notadam&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Specify files to be created in users home directories by default: &lt;strong&gt;/etc/skel&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;change-passwords-and-adjust-password-aging-for-local-user-accounts&#34;&gt;Change passwords and adjust password aging for local user accounts&lt;/h3&gt;
&lt;p&gt;Change the password for your currently logged in account: &lt;code&gt;passwd&lt;/code&gt;&lt;br&gt;
Change the password for another account (requires root): &lt;code&gt;passwd username&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Set password aging in &lt;code&gt;/etc/login.defs&lt;/code&gt;&lt;br&gt;
Find the variable named &lt;strong&gt;PASS_MAX_DAYS&lt;/strong&gt;&lt;br&gt;
Setting password aging in /etc/login.defs will only apply to newly created accounts&lt;br&gt;
Set the minimum password age for an existing account: &lt;code&gt;chage -m 3 username&lt;/code&gt;&lt;br&gt;
Set the maximum password age for an existing account: &lt;code&gt;chage -M 90 username&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-delete-and-modify-local-groups-and-group-memberships&#34;&gt;Create, delete, and modify local groups and group memberships&lt;/h3&gt;
&lt;p&gt;Add user to the group &amp;ldquo;wheel&amp;rdquo;: &lt;code&gt;usermod -aG wheel adam&lt;/code&gt;&lt;br&gt;
Using the -a switch along with the -G switch means it will &lt;strong&gt;append&lt;/strong&gt; group memberships rather than replace&lt;/p&gt;
&lt;p&gt;List members of a group: &lt;code&gt;lid -g groupname&lt;/code&gt;&lt;br&gt;
Delete a group: &lt;code&gt;groupdel groupname&lt;/code&gt;&lt;br&gt;
Change the name of a group: &lt;code&gt;groupmod -n newgroupname oldgroupname&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;configure-superuser-access&#34;&gt;Configure superuser access&lt;/h3&gt;
&lt;h2 id=&#34;manage-security&#34;&gt;Manage security&lt;/h2&gt;
&lt;h3 id=&#34;configure-firewall-settings-using-firewall-cmdfirewalld&#34;&gt;Configure firewall settings using firewall-cmd/firewalld&lt;/h3&gt;
&lt;h3 id=&#34;manage-default-file-permissions&#34;&gt;Manage default file permissions&lt;/h3&gt;
&lt;h3 id=&#34;configure-key-based-authentication-for-ssh&#34;&gt;Configure key-based authentication for SSH&lt;/h3&gt;
&lt;h3 id=&#34;set-enforcing-and-permissive-modes-for-selinux&#34;&gt;Set enforcing and permissive modes for SELinux&lt;/h3&gt;
&lt;h3 id=&#34;list-and-identify-selinux-file-and-process-context&#34;&gt;List and identify SELinux file and process context&lt;/h3&gt;
&lt;h3 id=&#34;restore-default-file-contexts&#34;&gt;Restore default file contexts&lt;/h3&gt;
&lt;h3 id=&#34;manage-selinux-port-labels&#34;&gt;Manage SELinux port labels&lt;/h3&gt;
&lt;h3 id=&#34;use-boolean-settings-to-modify-system-selinux-settings&#34;&gt;Use boolean settings to modify system SELinux settings&lt;/h3&gt;
&lt;h3 id=&#34;diagnose-and-address-routine-selinux-policy-violations&#34;&gt;Diagnose and address routine SELinux policy violations&lt;/h3&gt;
&lt;h2 id=&#34;manage-containers&#34;&gt;Manage containers&lt;/h2&gt;
&lt;h3 id=&#34;find-and-retrieve-container-images-from-a-remote-registry&#34;&gt;Find and retrieve container images from a remote registry&lt;/h3&gt;
&lt;h3 id=&#34;inspect-container-images&#34;&gt;Inspect container images&lt;/h3&gt;
&lt;h3 id=&#34;perform-container-management-using-commands-such-as-podman-and-skopeo&#34;&gt;Perform container management using commands such as podman and skopeo&lt;/h3&gt;
&lt;h3 id=&#34;build-a-container-from-a-containerfile&#34;&gt;Build a container from a Containerfile&lt;/h3&gt;
&lt;h3 id=&#34;perform-basic-container-management-such-as-running-starting-stopping-and-listing-running-containers&#34;&gt;Perform basic container management such as running, starting, stopping, and listing running containers&lt;/h3&gt;
&lt;h3 id=&#34;run-a-service-inside-a-container&#34;&gt;Run a service inside a container&lt;/h3&gt;
&lt;h3 id=&#34;configure-a-container-to-start-automatically-as-a-systemd-service&#34;&gt;Configure a container to start automatically as a systemd service&lt;/h3&gt;
&lt;h3 id=&#34;attach-persistent-storage-to-a-container&#34;&gt;Attach persistent storage to a container&lt;/h3&gt;
</content>
    </item>
    
  </channel>
</rss>
